{"version":3,"sources":["stores/TodoModel.js","stores/TodoStore.js","components/TodoEntry.js","components/TodoItem.js","components/TodoItems.js","components/Filter.js","components/Filters.js","components/TodoDetails.js","App.js","serviceWorker.js","index.js"],"names":["TodoModel","store","id","title","completed","this","decorate","observable","toggle","action","TodoStore","displayState","lastID","todos","todo","push","filter","display","count","map","taskCount","computed","addTodo","clearCompleted","changeDisplay","removeTodo","TodoEntry","props","handleKeyDown","event","keyCode","preventDefault","state","value","setState","className","onChange","target","onKeyDown","placeholder","autoFocus","Component","TodoItem","onToggle","type","checked","onClick","observer","TodoItems","htmlFor","index","key","Filter","children","Filters","TodoDetails","App","Boolean","window","location","hostname","match","configure","enforceActions","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uOAEMA,E,WAKF,WAAYC,EAAMC,EAAGC,EAAMC,GAAW,oBAClCC,KAAKJ,MAAQA,EACbI,KAAKH,GAAKA,EACVG,KAAKF,MAAQA,EACbE,KAAKD,UAAYA,E,qDAGjBC,KAAKD,WAAaC,KAAKD,c,KAI/BE,YAASN,EAAU,CAChBG,MAAMI,IACNH,UAAUG,IACVC,OAAOC,MAGKT,QCrBTU,E,WAEF,aAAe,oBACXL,KAAKM,aAAe,MACpBN,KAAKO,OAAS,EACdP,KAAKQ,MAAQ,G,oDAGTV,GACJ,IAAIW,EAAO,IAAId,EAAUK,KAAMA,KAAKO,SAAUT,GAAO,GACrDE,KAAKQ,MAAME,KAAKD,K,iCAGTZ,GACPG,KAAKQ,MAAQR,KAAKQ,MAAMG,QAAO,SAACF,GAC5B,OAAOA,EAAKZ,KAAOA,O,uCAgBvBG,KAAKQ,MAAQR,KAAKQ,MAAMG,QAAO,SAACF,GAC5B,OAA2B,IAAnBA,EAAKV,e,oCAIPa,GACVZ,KAAKM,aAAeM,I,gCAjBpB,IAAIC,EAAQ,EAOZ,OANAb,KAAKQ,MAAMM,KAAI,SAACL,GAIZ,OAHuB,IAAnBA,EAAKV,WACLc,IAEGJ,KAEJI,M,KAcfZ,YAASI,EAAW,CACZG,MAAON,IACPa,UAAWC,IACXV,aAAcJ,IACde,QAASb,IACTc,eAAgBd,IAChBe,cAAef,IACfgB,WAAYhB,MAIpB,IACeR,EADD,IAAIS,ECpBHgB,E,kDA9BX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAMVC,cAAgB,SAACC,GACS,KAAlBA,EAAMC,UACVD,EAAME,iBACN9B,EAAMqB,QAAQ,EAAKU,MAAMC,OACzB,EAAKC,SAAS,CACVD,MAAM,OAVV,EAAKD,MAAQ,CACTC,MAAM,IAHK,E,qDAeV,IAAD,OACJ,OACI,4BAAQE,UAAU,UACd,oCACA,2BACIF,MAAO5B,KAAK2B,MAAMC,MAClBG,SAAU,SAACP,GAAD,OAAS,EAAKK,SAAS,CAACD,MAAMJ,EAAMQ,OAAOJ,SACrDK,UAAW,SAACT,GAAD,OAAS,EAAKD,cAAcC,IACvCM,UAAU,WAAWI,YAAY,yBAAyBC,WAAS,S,GAxB/DC,a,OCAlBC,E,kDACF,WAAYf,GAAQ,IAAD,8BACf,cAAMA,IAIVgB,SAAS,WACL,EAAKhB,MAAMb,KAAKN,UAJhB,EAAKmB,MAAQA,EAFE,E,qDAQT,IACCb,EAAQT,KAAKsB,MAAbb,KACP,OACI,wBAAIqB,UAAWrB,EAAKV,UAAU,YAAY,IACtC,yBAAK+B,UAAU,QACX,2BACIC,SAAU/B,KAAKsC,SACfR,UAAU,SAASS,KAAK,WACxBC,QAAS/B,EAAKV,YAElB,+BAAQU,EAAKX,OACb,4BAAQgC,UAAU,UAAUW,QAAS,kBAAI7C,EAAMwB,WAAWX,EAAKZ,a,GApB5DuC,aA2BRC,EADfA,EAAWK,YAASL,GCxBdM,E,uKAEE,OACI,6BAASb,UAAU,QACf,2BAAOjC,GAAG,aAAaiC,UAAU,aAAaS,KAAK,aACnD,2BAAOK,QAAQ,cAAf,wBACA,wBAAId,UAAU,aAENlC,EAAMY,MAAMG,QAAO,SAACF,GAChB,OAAQb,EAAMU,cACV,IAAK,SACD,OAA4B,IAAnBG,EAAKV,UAClB,IAAK,YACD,OAA2B,IAAnBU,EAAKV,UACjB,QACI,OAAO,MAEhBe,KAAI,SAACL,EAAMoC,GACV,OACI,kBAAC,EAAD,CAAUC,IAAKD,EAAOpC,KAAMA,a,GAnBpC2B,aA6BTO,EADfA,EAAYD,YAASC,GC7BfI,E,kDAEF,WAAYzB,GAAQ,IAAD,8BACf,cAAMA,IACDK,MAAQ,EAAKL,MAAMK,MAFT,E,0DAKLH,EAAOZ,GACjBhB,EAAMuB,cAAcP,K,+BAId,IAAD,OACL,OACI,wBAAI6B,QAAS,SAACjB,GAAD,OAAS,EAAKL,cAAcK,EAAM,EAAKF,MAAM0B,YACtD,uBACIlB,UAAYlC,EAAMU,eAAiBN,KAAKsB,MAAM0B,SAAW,WAAW,IACnEhD,KAAKsB,MAAM0B,e,GAjBXZ,aA0BNW,EAFfA,EAASL,YAASK,GCAHE,E,kDAxBX,WAAY3B,GAAQ,IAAD,8BACf,cAAMA,IACDK,MAAQ,CACTf,QAAS,OAHE,E,qDAUf,OACI,wBAAIkB,UAAU,WAFJ,CAAC,MAAO,SAAU,aAIZhB,KAAI,SAACH,EAAOkC,GAChB,OACI,kBAAC,EAAD,CAAQC,IAAKD,GAASlC,W,GAjB5ByB,aCGhBc,E,+KAGEtD,EAAMsB,mB,+BAGA,IAAD,OACL,OACI,4BAAQY,UAAU,UACd,0BAAMA,UAAU,cAAa,gCAASlC,EAAMmB,WAA5C,cACA,kBAAC,EAAD,MACA,4BACI0B,QAAS,kBAAM,EAAKvB,kBACpBY,UAAU,mBAFd,wB,GAXUM,aAsBXc,EAFfA,EAAcR,YAASQ,GCJRC,G,6KAZP,OACI,yBAAKtD,GAAG,QAEJ,6BAASiC,UAAU,WACf,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GARFM,c,MCIEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,YAAU,CAACC,gBAAe,IAC1BC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.df506903.chunk.js","sourcesContent":["import {observable, action, decorate} from \"mobx\";\r\n\r\nclass TodoModel {\r\n    store;\r\n    id;\r\n    title;\r\n    completed;\r\n    constructor(store,id,title,completed){\r\n        this.store = store;\r\n        this.id = id;\r\n        this.title = title;\r\n        this.completed = completed;\r\n    }\r\n    toggle(){\r\n        this.completed = !this.completed\r\n    }\r\n}\r\n\r\ndecorate(TodoModel,{\r\n   title:observable,\r\n   completed:observable,\r\n   toggle:action\r\n});\r\n\r\nexport default TodoModel;","import TodoModel from \"./TodoModel\";\r\nimport {action, computed, decorate, observable} from \"mobx\";\r\n\r\nclass TodoStore {\r\n\r\n    constructor() {\r\n        this.displayState = 'all';\r\n        this.lastID = 0;\r\n        this.todos = [];\r\n    }\r\n\r\n    addTodo(title) {\r\n        let todo = new TodoModel(this, this.lastID++, title, false);\r\n        this.todos.push(todo);\r\n    }\r\n\r\n    removeTodo(id) {\r\n        this.todos = this.todos.filter((todo) => {\r\n            return todo.id !== id;\r\n        });\r\n    }\r\n\r\n    get taskCount() {\r\n        let count = 0;\r\n        this.todos.map((todo) => {\r\n            if (todo.completed === false) {\r\n                count++;\r\n            }\r\n            return todo;\r\n        });\r\n        return count;\r\n    }\r\n\r\n    clearCompleted() {\r\n        this.todos = this.todos.filter((todo) => {\r\n            return (todo.completed === false);\r\n        })\r\n    }\r\n\r\n    changeDisplay(display) {\r\n        this.displayState = display;\r\n    }\r\n}\r\n\r\ndecorate(TodoStore, {\r\n        todos: observable,\r\n        taskCount: computed,\r\n        displayState: observable,\r\n        addTodo: action,\r\n        clearCompleted: action,\r\n        changeDisplay: action,\r\n        removeTodo: action\r\n    }\r\n);\r\n\r\nconst store = new TodoStore();\r\nexport default store;","import React,{Component} from \"react\";\r\n\r\nimport store from '../stores/TodoStore'\r\n\r\nclass TodoEntry extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value:''\r\n        }\r\n    }\r\n\r\n    handleKeyDown = (event)=> {\r\n        if (event.keyCode !== 13) return;\r\n        event.preventDefault();\r\n        store.addTodo(this.state.value)\r\n        this.setState({\r\n            value:''\r\n        })\r\n    };\r\n    render(){\r\n        return(\r\n            <header className=\"header\">\r\n                <h1>todo</h1>\r\n                <input\r\n                    value={this.state.value}\r\n                    onChange={(event)=>this.setState({value:event.target.value})}\r\n                    onKeyDown={(event)=>this.handleKeyDown(event)}\r\n                    className=\"new-todo\" placeholder=\"What needs to be done?\" autoFocus\r\n                />\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoEntry;","import React,{Component} from \"react\";\r\nimport {observer} from \"mobx-react\";\r\nimport store from \"../stores/TodoStore\";\r\n\r\nclass TodoItem extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.props = props;\r\n    }\r\n\r\n    onToggle=()=>{\r\n        this.props.todo.toggle();\r\n    };\r\n    render() {\r\n        const {todo} = this.props;\r\n        return(\r\n            <li className={todo.completed?'completed':''}>\r\n                <div className=\"view\">\r\n                    <input\r\n                        onChange={this.onToggle}\r\n                        className=\"toggle\" type=\"checkbox\"\r\n                        checked={todo.completed}\r\n                    />\r\n                    <label>{todo.title}</label>\r\n                    <button className=\"destroy\" onClick={()=>store.removeTodo(todo.id)}/>\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n}\r\nTodoItem = observer(TodoItem);\r\nexport default TodoItem;","import React, {Component} from \"react\";\r\n\r\nimport TodoItem from \"./TodoItem\";\r\nimport store from \"../stores/TodoStore\";\r\nimport {observer} from \"mobx-react\";\r\n\r\nclass TodoItems extends Component {\r\n    render() {\r\n        return (\r\n            <section className=\"main\">\r\n                <input id=\"toggle-all\" className=\"toggle-all\" type=\"checkbox\"/>\r\n                <label htmlFor=\"toggle-all\">Mark all as complete</label>\r\n                <ul className=\"todo-list\">\r\n                    {\r\n                        store.todos.filter((todo) => {\r\n                            switch (store.displayState) {\r\n                                case 'active':\r\n                                    return ( todo.completed === false );\r\n                                case 'completed':\r\n                                    return (todo.completed === true);\r\n                                default:\r\n                                    return true;\r\n                            }\r\n                        }).map((todo, index) => {\r\n                            return (\r\n                                <TodoItem key={index} todo={todo}/>\r\n                            );\r\n                        })}\r\n                </ul>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nTodoItems = observer(TodoItems);\r\nexport default TodoItems;","import React,{Component} from \"react\";\r\n\r\nimport store from \"../stores/TodoStore\";\r\nimport {observer} from \"mobx-react\";\r\n\r\nclass Filter extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.props.state;\r\n    }\r\n\r\n    changeDisplay(event, display) {\r\n        store.changeDisplay(display);\r\n    }\r\n\r\n\r\n    render() {\r\n        return(\r\n            <li onClick={(event)=>this.changeDisplay(event,this.props.children)}>\r\n                <a\r\n                    className={ store.displayState === this.props.children ? 'selected':'' }>\r\n                    {this.props.children}\r\n                </a>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nFilter = observer(Filter);\r\n\r\nexport default Filter;","import React, {Component} from \"react\";\r\nimport Filter from \"./Filter\";\r\n\r\nclass Filters extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            display: 'all'\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        let filters = ['all', 'active', 'completed']\r\n        return (\r\n            <ul className=\"filters\">\r\n                {\r\n                    filters.map((filter,index) => {\r\n                        return (\r\n                            <Filter key={index} >{filter}</Filter>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Filters;","import React, {Component} from \"react\";\r\n\r\nimport store from \"../stores/TodoStore\";\r\nimport {observer} from \"mobx-react\";\r\nimport Filters from \"./Filters\";\r\n\r\nclass TodoDetails extends Component {\r\n\r\n    clearCompleted() {\r\n        store.clearCompleted();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <footer className=\"footer\">\r\n                <span className=\"todo-count\"><strong>{store.taskCount}</strong> item left</span>\r\n                <Filters />\r\n                <button\r\n                    onClick={() => this.clearCompleted()}\r\n                    className=\"clear-completed\">Clear completed\r\n                </button>\r\n            </footer>\r\n        );\r\n    }\r\n}\r\n\r\nTodoDetails = observer(TodoDetails);\r\n\r\nexport default TodoDetails;","import React, {Component} from 'react';\n\nimport TodoEntry from './components/TodoEntry'\nimport TodoItems from \"./components/TodoItems\";\nimport TodoDetails from \"./components/TodoDetails\";\n\nimport './App.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <div id=\"root\">\n\n                <section className=\"todoapp\">\n                    <TodoEntry />\n                    <TodoItems />\n                    <TodoDetails />\n                </section>\n            </div>\n        );\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {configure} from \"mobx\";\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nconfigure({enforceActions:true});\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}